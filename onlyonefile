import numpy as np
import time

def check(grid, row, col, num):
    '''Checks whether placing the number in the spot is legal'''

    # rows and columns
    for i in range(9):
        if grid[row][i] == num:
            return False
    for i in range(9):
        if grid[i][col] == num:
            return False

    # boxes
    row1 = row - row % 3
    col1 = col - col % 3
    for i in range(3):
        for j in range(3):
            if grid[i + row1][j + col1] == num:
                return False

    return True

def empty(grid, l):
    '''Finds the next empty square in the grid and updates l with its coordinates'''

    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                l[0] = i
                l[1] = j
                return True
    return False

def m_posnums(grid, row, col):
    '''Takes in coordinates and returns a list of possible values'''

    posl = list(range(1, 10))

    # removing from posl when encountering the same number on the row or column
    for i in range(9):
        if grid[row][i] in posl:
            posl.remove(grid[row][i])
        if grid[i][col] in posl:
            posl.remove(grid[i][col])

    # box removal
    row1 = row - row % 3
    col1 = col - col % 3
    for i in range(3):
        for j in range(3):
            if grid[row1 + i][col1 + j] in posl:
                posl.remove(grid[row1 + i][col1 + j])

    return posl

def solve(grid):
    '''Iterates retursively through the grid, placing valid numbers and returning a bool'''

    # iterates through the whole grid and checks for naked singles
    for i in range(9):
        for j in range(9):
            l =  m_posnums(grid, i, j)
            if grid[i][j] == 0 and len(l) == 1:
                grid[i][j] = l[0]

                # recurse
                if solve(grid):
                    return True

                # no? replace and backtrack
                grid[i][j] = 0
                return False

    l = [0, 0]

    # if board is full, then it's done
    if not empty(grid, l):
        return True
    
    # set current row and column and possible candidate
    row = l[0]
    col = l[1]

    possible_numbers = m_posnums(grid, row, col)

    # iterates through possibilities and adds them recursively
    for num in possible_numbers:
        if check(grid, row, col, num):
            grid[row][col] = num

            if solve(grid):
                return True

            # no? backtrack
            grid[row][col] = 0

    return False

easy = np.array([[0, 1, 0, 0, 0, 7, 0, 0, 0],
                 [7, 0, 0, 0, 0, 0, 4, 0, 3],
                 [0, 0, 2, 0, 6, 3, 0, 7, 0],
                 [9, 0, 4, 0, 1, 2, 0, 0, 6],
                 [2, 6, 1, 0, 5, 8, 3, 4, 0],
                 [8, 0, 5, 0, 0, 0, 1, 0, 0],
                 [0, 0, 8, 0, 2, 0, 0, 0, 0],
                 [0, 2, 7, 4, 3, 9, 0, 0, 8],
                 [5, 4, 3, 7, 0, 1, 2, 0, 0]])

medium = np.array([[0, 4, 9, 1, 0, 0, 0, 0, 0],
                 [0, 0, 1, 2, 0, 6, 0, 0, 0],
                 [0, 0, 5, 0, 8, 0, 0, 9, 0],
                 [0, 9, 6, 0, 0, 5, 3, 0, 8],
                 [0, 1, 0, 0, 6, 3, 4, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 3, 0, 0, 0, 9, 8, 0],
                 [7, 0, 0, 0, 0, 0, 0, 1, 0],
                 [0, 6, 0, 0, 3, 0, 0, 0, 0]])

hard = np.array([[0, 9, 0, 8, 0, 0, 0, 6, 0],
                 [6, 0, 7, 0, 2, 0, 1, 0, 0],
                 [0, 3, 0, 0, 0, 7, 0, 0, 0],
                 [8, 0, 4, 0, 0, 9, 0, 1, 0],
                 [0, 0, 0, 5, 0, 0, 2, 0, 0],
                 [0, 6, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 9, 0, 0, 0, 4],
                 [0, 0, 3, 0, 0, 0, 0, 0, 0],
                 [7, 0, 1, 0, 0, 4, 0, 8, 0]])


start = time.time()
if solve(easy):
    print(easy)
else:
    print('no solution')
print(time.time() - start)

start = time.time()
if solve(medium):
    print(medium)
else:
    print('no solution')
print(time.time() - start)

start = time.time()
if solve(hard):
    print(hard)
else:
    print('no solution')
print(time.time() - start)

##############
Pygame visual:
##############

import sys
import pygame as pg
import numpy as np
import time

pg.init()
screen_size = 750, 750
screen = pg.display.set_mode(screen_size)

font = pg.font.SysFont(None, 80)

easy = np.array([[0, 1, 0, 0, 0, 7, 0, 0, 0],
                 [7, 0, 0, 0, 0, 0, 4, 0, 3],
                 [0, 0, 2, 0, 6, 3, 0, 7, 0],
                 [9, 0, 4, 0, 1, 2, 0, 0, 6],
                 [2, 6, 1, 0, 5, 8, 3, 4, 0],
                 [8, 0, 5, 0, 0, 0, 1, 0, 0],
                 [0, 0, 8, 0, 2, 0, 0, 0, 0],
                 [0, 2, 7, 4, 3, 9, 0, 0, 8],
                 [5, 4, 3, 7, 0, 1, 2, 0, 0]])

hard = np.array([[0, 9, 0, 8, 0, 0, 0, 6, 0],
                 [6, 0, 7, 0, 2, 0, 1, 0, 0],
                 [0, 3, 0, 0, 0, 7, 0, 0, 0],
                 [8, 0, 4, 0, 0, 9, 0, 1, 0],
                 [0, 0, 0, 5, 0, 0, 2, 0, 0],
                 [0, 6, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 9, 0, 0, 0, 4],
                 [0, 0, 3, 0, 0, 0, 0, 0, 0],
                 [7, 0, 1, 0, 0, 4, 0, 8, 0]])

def draw_background():
    screen.fill(pg.Color("white"))
    pg.draw.rect(screen, pg.Color("black"), pg.Rect(15, 15, 720, 720), 10)
    i = 1
    while (i * 80) < 720:
        line_width = 5 if i % 3 > 0 else 10
        pg.draw.line(screen, pg.Color("black"), pg.Vector2((i * 80) + 15, 15), pg.Vector2((i * 80) + 15, 735), line_width)
        pg.draw.line(screen, pg.Color("black"), pg.Vector2(15, (i * 80) + 15), pg.Vector2(735, (i * 80) + 15), line_width)
        i += 1
        
def draw_numbers(grid):
    row = 0
    offset = 35
    while row < 9:
        col = 0
        while col < 9:
            output = grid[row][col]
            numtext = font.render(str(output), True, pg.Color("black"))
            screen.blit(numtext, pg.Vector2((col * 80) + offset + 5, (row * 80) + offset - 2))
            col += 1
        row += 1
        

def check(grid, row, col, num):

    for i in range(9):
        if grid[row][i] == num:
            return False
    for i in range(9):
        if grid[i][col] == num:
            return False

    row1 = row - row % 3
    col1 = col - col % 3
    for i in range(3):
        for j in range(3):
            if grid[i + row1][j + col1] == num:
                return False
    return True

def empty(grid, l):
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                l[0] = i
                l[1] = j
                return True
    return False

def m_posnums(grid, row, col):
    posl = list(range(1, 10))

    for i in range(9):
        if grid[row][i] in posl:
            posl.remove(grid[row][i])
        if grid[i][col] in posl:
            posl.remove(grid[i][col])

    row1 = row - row % 3
    col1 = col - col % 3
    for i in range(3):
        for j in range(3):
            if grid[row1 + i][col1 + j] in posl:
                posl.remove(grid[row1 + i][col1 + j])

    return posl

def solve(board):

    for i in range(9):
        for j in range(9):
            l =  m_posnums(board, i, j)
            if board[i][j] == 0 and len(l) == 1:
                board[i][j] = l[0]

                draw_background()
                draw_numbers(board)
                time.sleep(.0005)
                pg.display.flip()
                time.sleep(.0005)

                if solve(board):
                    return True

                board[i][j] = 0
                return False

    l = [0, 0]
    if not empty(board, l):
        return True
    row = l[0]
    col = l[1]

    possible_numbers = m_posnums(board, row, col)

    for num in possible_numbers:
          if check(board, row, col, num):
              board[row][col] = num

              draw_background()
              draw_numbers(board)
              time.sleep(.0005)
              pg.display.flip()
              time.sleep(.0005)

              if solve(board):
                  return True

              board[row][col] = 0

    return False


def game_loop():
    for event in pg.event.get():
        if event.type == pg.QUIT:
            sys.exit()

    # n is the name of the grid being solved
    solve(n)

while 1:
    game_loop()
